module password_checker (
    input clk,
    input reset,
    input [7:0] char_in,     // Input character (8-bit ASCII)
    input char_valid,        // Signal: char_in is valid
    output reg password_match
);

    // Define the correct password (example: "1234")
    localparam PASSWORD_LENGTH = 4;
    reg [7:0] password [0:PASSWORD_LENGTH-1];
    reg [1:0] index;         // index for current char input

    reg match_flag;

    initial begin
        password[0] = 8'h31; // '1'
        password[1] = 8'h32; // '2'
        password[2] = 8'h33; // '3'
        password[3] = 8'h34; // '4'
    end

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            index <= 0;
            password_match <= 0;
            match_flag <= 1;
        end else if (char_valid) begin
            if (char_in == password[index]) begin
                match_flag <= match_flag & 1;
            end else begin
                match_flag <= 0;
            end

            if (index == PASSWORD_LENGTH-1) begin
                password_match <= match_flag & (char_in == password[index]);
                index <= 0;
                match_flag <= 1;
            end else begin
                index <= index + 1;
            end
        end
    end

endmodule
